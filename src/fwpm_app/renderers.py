from __future__ import annotations

import html
from datetime import datetime, timezone
from typing import Iterable, Tuple

import markdown


def build_confluence_storage(
    jira_base_url: str,
    filter_id: str,
    filter_name: str,
    total_issues: int,
    issue_blocks: Iterable[Tuple[str, str, str, str | None, str]],
) -> str:
    """
    Build Confluence storage-format HTML with sections per issue.

    Args:
        jira_base_url: Base URL for linking to issues.
        filter_id: The JIRA filter identifier used.
        filter_name: The JIRA filter name.
        total_issues: Count of issues returned by the filter.
        issue_blocks: Iterable of tuples `(issue_key, issue_summary, assignee_name, assignee_url, generated_text)`.
    """
    timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M UTC")
    filter_url = f"{jira_base_url.rstrip('/')}/issues/?filter={html.escape(filter_id)}"
    header = "".join(
        [
            f"<p>Automated summary generated at {html.escape(timestamp)}.</p>",
            (
                f"<p>Filter: <a href=\"{filter_url}\">{html.escape(filter_id)}</a> "
                f"({html.escape(filter_name)}) • Issues returned: {total_issues}</p>"
            ),
            "<p>Review for accuracy before sharing broadly.</p>",
        ]
    )

    sections = []
    for issue_key, summary, assignee_name, assignee_url, llm_text in issue_blocks:
        url = f"{jira_base_url.rstrip('/')}/browse/{issue_key}"
        safe_key = html.escape(issue_key)
        safe_summary = html.escape(summary or "")
        safe_assignee_name = html.escape(assignee_name or "Unassigned")
        assignee_html = safe_assignee_name
        if assignee_url:
            assignee_html = f"<a href=\"{html.escape(assignee_url)}\">{safe_assignee_name}</a>"
        safe_body = _render_markdown(llm_text)

        section = (
            f"<h2><a href=\"{html.escape(url)}\">{safe_key}</a> – {safe_summary}</h2>"
            f"<p><strong>Assignee:</strong> {assignee_html}</p>"
            f"<p><strong>Summary generated by LLM:</strong></p>{safe_body}"
        )
        sections.append(section)

    return header + "".join(sections)


def _render_markdown(text: str) -> str:
    converted = markdown.markdown(text or "", extensions=[])
    return converted
